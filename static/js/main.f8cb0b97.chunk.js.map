{"version":3,"sources":["actions/index.js","pages/Login.js","pages/components/Valor.js","pages/components/Descricao.js","pages/components/Moeda.js","pages/components/Pagamento.js","pages/components/Tag.js","pages/components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["fetchCoins","dispatch","type","fetch","then","result","json","data","requestCoinsuccess","catch","error","Login","props","state","email","password","statusPass","statusEmail","readForm","bind","validEmail","validPassword","e","value","target","checked","this","setState","name","validationAll","match","length","saveLogin","className","placeholder","data-testid","onChange","required","to","disabled","onClick","React","Component","connect","Valor","inputValue","htmlFor","id","Descrição","Moeda","console","log","map","coins","Object","values","siglasCoins","filter","item","codein","option","index","key","code","wallet","currencies","actions","Pagamento","method","Tag","tag","Table","currency","exchangeRates","valor","find","coin","ask","Number","toFixed","expenses","delExpenses","description","completedName","rateCambio","convertCambio","Wallet","readInput","sendData","event","total","reduce","acumulator","saveExpenses","oldState","calulator","user","App","exact","path","component","Boolean","window","location","hostname","INITIAL_STATE","loginReducer","action","isLoading","coinsReducer","expense","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f8cb0b97.chunk.js","sourcesContent":["// Coloque aqui suas actions\n\nexport const REQUEST_COINS = 'REQUEST_COINS';\nexport const REQUEST_COINS_SUCCESS = 'REQUEST_COINS_SUCCESS';\nexport const REQUEST_COINS_ERROR = 'REQUEST_COINS_ERROR';\nexport const SAVE_LOGIN = 'SAVE_LOGIN';\nexport const SAVE_EXPENSES = 'SAVE_EXPENSES';\nexport const DELETE_EXPENSES = 'DELETE_EXPENSES';\n\nexport const saveLogin = (email) => ({\n  type: SAVE_LOGIN,\n  email,\n});\n\nexport const requestCoins = () => ({\n  type: REQUEST_COINS,\n});\n\nexport const requestCoinsuccess = (data) => ({\n  type: REQUEST_COINS_SUCCESS,\n  data,\n});\n\nexport const requestCoinsError = (data) => ({\n  type: REQUEST_COINS_ERROR,\n  data,\n});\n\nexport const fetchCoins = () => (dispatch) => {\n  dispatch(requestCoins());\n  return fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((result) => result.json())\n    .then((data) => dispatch(requestCoinsuccess(data)))\n    .catch((error) => dispatch(requestCoinsError(error)));\n};\n\nexport const saveExpenses = (expenses) => ({\n  type: SAVE_EXPENSES,\n  expenses,\n});\n\nexport function delExpenses(expenses) {\n  return {\n    type: DELETE_EXPENSES,\n    expenses,\n  };\n}\n","import React from 'react';\n// import 'bulma/css/bulma.min.css';\nimport '../Login.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport * as actions from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      statusPass: false,\n      statusEmail: false,\n    };\n\n    this.readForm = this.readForm.bind(this);\n    this.validEmail = this.validEmail.bind(this);\n    this.validPassword = this.validPassword.bind(this);\n  }\n\n  readForm(e) {\n    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    this.setState({\n      [e.target.name]: value,\n    }, () => this.validationAll());\n  }\n\n  // Esta função validationAll é utilizada aqui por uma limitação no avaliador, a ideia inical era colocar em um evento\n  // onBlur no input\n\n  // lógica adaptada de https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n  validEmail() {\n    const { email } = this.state;\n    if (!email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/igm)) {\n      this.setState({\n        statusEmail: false,\n      });\n    } else {\n      this.setState({\n        statusEmail: true,\n      });\n    }\n  }\n\n  validPassword() {\n    const { password } = this.state;\n    const number = 6;\n    if (password.length < number) {\n      this.setState({\n        statusPass: false,\n      });\n    } else {\n      this.setState({\n        statusPass: true,\n      });\n    }\n  }\n\n  validationAll() {\n    this.validEmail();\n    this.validPassword();\n  }\n\n  render() {\n    const { statusPass, statusEmail, email } = this.state;\n    const { saveLogin } = this.props;\n    return (\n      <section className=\"login\">\n        <h1> Sistema Trybe Wallet </h1>\n        <div className=\"field\">\n          <p className=\"control has-icons-left has-icons-right\">\n            <input\n              className=\"input\"\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"E-mail\"\n              data-testid=\"email-input\"\n              onChange={ this.readForm }\n              required\n            />\n          </p>\n        </div>\n        <div className=\"field\">\n          <p className=\"control has-icons-left\">\n            <input\n              className=\"input\"\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              data-testid=\"password-input\"\n              onChange={ this.readForm }\n              required\n            />\n          </p>\n        </div>\n        <div className=\"field\">\n          <p className=\"control\">\n            <Link to=\"/carteira\">\n              <button\n                className=\"button is-success\"\n                type=\"button\"\n                disabled={ !statusEmail || !statusPass }\n                onClick={ () => saveLogin(email) }\n              >\n                Entrar\n              </button>\n            </Link>\n          </p>\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveLogin: (e) => dispatch(actions.saveLogin(e)),\n});\n\nLogin.propTypes = {\n  saveLogin: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Valor extends React.Component {\n  render() {\n    const { inputValue } = this.props;\n    return (\n      <label htmlFor=\"Valor\">\n        Valor\n        <input\n          type=\"number\"\n          name=\"value\"\n          id=\"Valor\"\n          onChange={ inputValue }\n        />\n      </label>\n    );\n  }\n}\n\nValor.propTypes = {\n  inputValue: PropTypes.number,\n}.isRequired;\n\nexport default Valor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Descrição extends React.Component {\n  render() {\n    const { inputValue } = this.props;\n    return (\n      <label htmlFor=\"Descrição\">\n        Descrição\n        <input\n          type=\"text\"\n          name=\"description\"\n          id=\"Descrição\"\n          onChange={ inputValue }\n        />\n      </label>\n    );\n  }\n}\n\nDescrição.propTypes = {\n  inputValue: PropTypes.string,\n}.isRequired;\n\nexport default Descrição;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass Moeda extends React.Component {\n  componentDidMount() {\n    const { fetchCoins } = this.props;\n    fetchCoins();\n  }\n\n  render() {\n    const { data, inputValue } = this.props;\n    console.log('Eu sou o data', data);\n    // console.log((data.map((coins) => Object.values(coins))));\n    return (\n      <label htmlFor=\"Moeda\">\n        Moeda\n        <select\n          id=\"Moeda\"\n          name=\"currency\"\n          onChange={ inputValue }\n        >\n          { (data && data.map((coins) => Object.values(coins)\n            .map((siglasCoins) => siglasCoins)\n            .filter((item) => item.codein !== 'BRLT')\n            .map((option, index) => <option key={ index }>{option.code}</option>))) }\n        </select>\n      </label>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  data: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCoins: () => dispatch(actions.fetchCoins()),\n});\n\nMoeda.propTypes = {\n  fetchCoins: PropTypes.func,\n  data: PropTypes.shape,\n  inputValue: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Moeda);\n\n// Tive ajuda do parceiro Arthur Hermann\n// Também me ajudou o parceiro Guilherme Pereira\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Pagamento extends React.Component {\n  render() {\n    const { inputValue } = this.props;\n    const methodsPay = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    return (\n      <label htmlFor=\"Método de pagamento\">\n        Método de pagamento\n        <select\n          name=\"method\"\n          id=\"Método de pagamento\"\n          onChange={ inputValue }\n        >\n          { methodsPay.map((method, index) => (\n            <option key={ index }>{ method }</option>)) }\n        </select>\n      </label>\n    );\n  }\n}\n\nPagamento.propTypes = {\n  inputValue: PropTypes.string,\n}.isRequired;\n\nexport default Pagamento;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Tag extends React.Component {\n  render() {\n    const { inputValue } = this.props;\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <label htmlFor=\"Tag\">\n        Tag\n        <select\n          name=\"tag\"\n          id=\"Tag\"\n          onChange={ inputValue }\n        >\n          { tags.map((tag, index) => (\n            <option key={ index }>{ tag }</option>)) }\n        </select>\n      </label>\n    );\n  }\n}\n\nTag.propTypes = {\n  inputValue: PropTypes.string,\n}.isRequired;\n\nexport default Tag;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\nimport '../../Table.css';\n\nclass Table extends Component {\n  convertCambio({ value, currency, exchangeRates }) {\n    const valor = Object.values(exchangeRates).find((coin) => coin.code === currency).ask;\n    return (Number(valor) * value).toFixed(2);\n  }\n\n  completedName({ currency, exchangeRates }) {\n    return Object.values(exchangeRates).find((coin) => coin.code === currency).name;\n  }\n\n  rateCambio({ currency, exchangeRates }) {\n    const valor = Object.values(exchangeRates).find((coin) => coin.code === currency).ask;\n    return Number(valor).toFixed(2);\n  }\n\n  render() {\n    const { expenses, delExpenses } = this.props;\n    return (\n      <table>\n        <tr className=\"row\">\n          <th>ID</th>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n        {expenses.map((item) => (\n          <tr key={ item.id } className=\"\">\n            <td key={ item.id }>{ item.id }</td>\n            <td key={ item.id }>{ item.description }</td>\n            <td key={ item.id }>{ item.tag }</td>\n            <td key={ item.id }>{ item.method }</td>\n            <td key={ item.id }>{ item.value }</td>\n            <td key={ item.id }>{ this.completedName(item) }</td>\n            <td key={ item.id }>{ this.rateCambio(item) }</td>\n            <td key={ item.id }>{ this.convertCambio(item) }</td>\n            <td key={ item.id }>Real</td>\n            <button\n              data-testid=\"delete-btn\"\n              type=\"button\"\n              onClick={ () => delExpenses(item.id) }\n            >\n              Deletar\n            </button>\n          </tr>\n        ))}\n      </table>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.func.isRequired,\n  delExpenses: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  delExpenses: (e) => dispatch(actions.delExpenses(e)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Valor from './components/Valor';\nimport Descrição from './components/Descricao';\nimport Moeda from './components/Moeda';\nimport Pagamento from './components/Pagamento';\nimport Tag from './components/Tag';\nimport * as actions from '../actions';\nimport Table from './components/Table';\nimport '../Wallet.css';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n      exchangeRates: [],\n    };\n\n    this.readInput = this.readInput.bind(this);\n    this.sendData = this.sendData.bind(this);\n  }\n\n  readInput(event) {\n    const { value, name } = event.target;\n    const { data } = this.props;\n    this.setState({\n      [name]: value,\n      exchangeRates: data[0], // [0] porque é um array de objetos\n    });\n  }\n\n  calulator() {\n    const { expenses } = this.props;\n    console.log(expenses);\n    const total = expenses.reduce((acumulator, { exchangeRates, currency, value }) => (\n      acumulator + (Number(exchangeRates[currency].ask) * Number(value))\n    ), 0);\n    console.log(total);\n    return total.toFixed(2);\n  }\n\n  sendData() {\n    const { saveExpenses, fetchCoins } = this.props;\n    fetchCoins(); // segunda requisição para pegar valores mais atuais\n    this.setState((oldState) => ({\n      id: oldState.id + 1 }\n    ));\n    saveExpenses(this.state);\n  }\n\n  render() {\n    const { email } = this.props;\n    const { currency } = this.state;\n    return (\n      <section>\n        <header>\n          <h1>TrybeWallet</h1>\n          <h3 data-testid=\"email-field\">\n            <p>Bem vindo!</p>\n            { email }\n          </h3>\n          <h2 data-testid=\"total-field\">\n            Total:\n            { this.calulator() }\n          </h2>\n          <h2 data-testid=\"header-currency-field\">\n            BRL\n          </h2>\n        </header>\n        <form className=\"myform\">\n          <Valor\n            inputValue={ this.readInput }\n          />\n          <Descrição\n            inputValue={ this.readInput }\n          />\n          <Moeda\n            inputValue={ this.readInput }\n          />\n          <Pagamento\n            inputValue={ this.readInput }\n          />\n          <Tag\n            inputValue={ this.readInput }\n          />\n          <button\n            type=\"button\"\n            onClick={ this.sendData }\n            disabled={ !currency }\n          >\n            Adicionar despesa\n          </button>\n        </form>\n        <br />\n        <Table />\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  data: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpenses: (e) => dispatch(actions.saveExpenses(e)),\n  fetchCoins: () => dispatch(actions.fetchCoins()),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string,\n  saveExpenses: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { SAVE_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction loginReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_LOGIN:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default loginReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  REQUEST_COINS,\n  REQUEST_COINS_ERROR,\n  REQUEST_COINS_SUCCESS,\n  SAVE_EXPENSES,\n  DELETE_EXPENSES,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isLoading: false,\n};\n\nfunction coinsReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case REQUEST_COINS:\n    return {\n      ...state,\n      isLoading: true,\n    };\n  case REQUEST_COINS_SUCCESS:\n    return {\n      ...state,\n      currencies: [...state.currencies, action.data], // poderia ser apenas [action.data]\n      isLoading: false,\n    };\n  case REQUEST_COINS_ERROR:\n    return {\n      ...state,\n      isLoading: false,\n    };\n  case SAVE_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenses],\n      isLoading: false,\n    };\n  case DELETE_EXPENSES:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.expenses),\n      isLoading: false,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default coinsReducer;\n","// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename=\"/tarcisio-menezes\">\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}